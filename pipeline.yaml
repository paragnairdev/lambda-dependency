AWSTemplateFormatVersion: 2010-09-09

Description: "CI/CD Pipeline"

Parameters:
  Branch:
    Type: String
    Default: master
    Description: Branch to trigger build on
  GlobalStackName:
    Type: String
    Default: global-resources
    Description: Name of stack which has the artifact s3 bucket and approval notification topic
  GithubRepo:
    Type: String
    Default: "lambda-dependency"
    Description: Github repository
  GithubUser:
    Type: String
    Description: Github username
  GithubToken:
    Type: String
    Description: OAuth Token from Github

Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - s3:PutObject
                Resource: 
                  - arn:aws:s3:::codepipeline*
                  - arn:aws:s3:::elasticbeanstalk*
              - Effect: "Allow"
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - s3:*
                  - sns:Publish
                Resource: "*"
  
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: "Allow"
                Resource:
                  - !Join
                    - ''
                    - -  "arn:aws:s3:::"
                      -  Fn::ImportValue: 
                            !Sub "${GlobalStackName}-CodeArtifactStore"
                      - "/*"
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
  
  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - 
         PolicyName: "root"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - Effect: "Allow"
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarm
                  - cloudwatch:DeleteAlarms
                  - logs:*
                  - iam:*
                  - lambda:*
                  - s3:*
                Resource: "*" 
  
  LambdaCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Packaging: NONE
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:1.12.1
        Type: LINUX_CONTAINER
      Name: !Sub "${AWS::StackName}-Lambda-Build"
      ServiceRole: !Ref CodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
  
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: 
          Fn::ImportValue:
            !Sub "${GlobalStackName}-CodeArtifactStore"
      Stages: 
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: Source
              Configuration:
                Owner: !Ref GithubUser
                Repo: !Ref GithubRepo
                Branch: !Ref Branch
                OAuthToken: !Ref GithubToken
              RunOrder: 1
        - Name: ApproveProceed
          Actions:
            - Name: ConfirmProceed
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: 
                  Fn::ImportValue: !Sub "${GlobalStackName}-GlobalNotificationTopic"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildLambda
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: MyLambda
              Configuration:
                ProjectName: !Ref LambdaCodeBuildProject
              RunOrder: 1
            - Name: ApproveBuild
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: 
                  Fn::ImportValue: !Sub "${GlobalStackName}-GlobalNotificationTopic"
              RunOrder: 2
        - Name: Staging
          Actions:
            - Name: DeployStaging
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: Source
                - Name: MyLambda
              OutputArtifacts:
                - Name: StackOut
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: sample-lambda-staging
                TemplatePath: Source::app.yaml
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                OutputFileName: staging-output.json
                ParameterOverrides: >-
                  {"Environment":"staging", "ArtifactsBucket":{"FN::GetArtifactAtt":["MyLambda", "BucketName"]}, "LambdaPackageObjectKey": {"FN::GetArtifactAtt":["MyLambda", "ObjectKey"]}}
              RunOrder: 1
            - Name: ApproveStaging
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: 
                  Fn::ImportValue: !Sub "${GlobalStackName}-GlobalNotificationTopic"
              RunOrder: 2
            - Name: DeleteStaging
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: DELETE_ONLY
                StackName: sample-lambda-staging
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
              RunOrder: 3